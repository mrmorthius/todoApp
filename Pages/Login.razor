@using System.ComponentModel.DataAnnotations;
@page "/login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager


<PageTitle>Login</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}

<EditForm Model="userLogin" OnValidSubmit="@(async() => HandleLogin(userLogin.Username, userLogin.Password))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for=" username" class="form-label">
            Username
        </label>
        <InputText id="username" class="form-control" @bind-Value="userLogin.Username" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">
            Password
        </label>
        <InputText id="password" class="form-control" @bind-Value="userLogin.Password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Logg inn</button>
</EditForm>
@code {
    private string? errorMessage;
    private UserLogin userLogin = new();

    protected override async Task OnInitializedAsync()
    {

        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }

        var redirected = await AuthService.IsRedirected();
        if (redirected)
        {
            errorMessage = "Du må være logget inn for å se applikasjonen";
            await AuthService.RemoveRedirect();
        }
    }

    private async Task HandleLogin(string Username, string Password)
    {
        var result = await AuthService.Login(userLogin.Username, userLogin.Password);
        if (result)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password";
        }
    }

    private class UserLogin
    {
        [Required]
        [StringLength(20, ErrorMessage = "Username must be between 3 and 20 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(20, ErrorMessage = "Password must be between 5 and 20 characters", MinimumLength = 5)]
        public string Password { get; set; } = string.Empty;

    }

}
